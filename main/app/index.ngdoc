@ngdoc overview

 @name itesoft
 @module itesoft
 @name API Reference
 @description

# AngularJS API Docs

##Quoi que c'est ?
Cette librairie a pour objectif la mise en commun des composants (génériques) AngularJS développés par Itesoft, afin de capitaliser au mieux le travail accompli par les différentes équipes.

[demo and documentation](http://alizarion.github.io/angular-common/)

##Prérequis

[git](https://git-scm.com/downloads) avec prise en charge du prompt sous windows.

[npm](https://www.npmjs.com/package/npm).

installer bower en globale :

            npm install bower -g

##Comment l'intégrer dans mon projet ?

Un template permettant de demarrer rapidement un nouveau projet est disponible [ICI](https://github.com/alizarion/angular-common-quickstart).

        git clone https://github.com/alizarion/angular-common-quickstart
        cd angular-common-quickstart
        npm install
        bower install



##Installation

                git clone https://github.com/alizarion/angular-common.git
                npm install
                bower install

##Build

               gulp build

## Structure du projet

Pour mieux s'y retrouver, le projet est structuré de la façon suivante.

                     .
                     |--- docs(ne pas commité, généré automatiquement par la commande gulp docs)
                     |
                     |--- dist(ne pas commité, généré automatiquement par la commande gulp build)
                     |
                     |--- main
                     |    |--- index.html
                     |    |--- app
                     |    |    |
                     |    |    |--- composite
                     |    |    |    |
                     |    |    |    |--- directive1
                     |    |    |    |    |--- directive1.js
                     |    |    |    |    |--- directive1ChildDirective.js
                     |    |    |    |    |--- directive1Service.js
                     |    |    |    |--- directive2
                     |    |    |    |    |--- directive2.js
                     |    |    |    |    |--- directive2ChildDirective.js
                     |    |    |    |    |--- directive2Filter.js
                     |    |    |    |    |--- directive2Doc.ngdoc
                     |    |    |    |
                     |    |    |    |--- directive3
                     |    |    |         |--- directive3.js
                     |    |    |
                     |    |    |--- services
                     |    |         |
                     |    |         |--- service1
                     |    |         |    |--- service1.js
                     |    |         |    |--- service1.ngdoc
                     |    |         |
                     |    |         |--- service2
                     |    |              |--- service2.js
                     |    |
                     |    |--- assets
                     |          |--- css (vide, les fichiers seront généré par l'interpretation des fichiers less et sass)
                     |          |--- fonts
                     |          |--- img
                     |          |--- js
                     |          |--- less (material bootstrap less files)
                     |          |--- lib (librairies installé par bower)
                     |          |--- scss
                     |              |
                     |              |--- _directive2.scss
                     |              |--- _directive1.scss
                     |              |--- _directive3.scss
                     |              |--- itesoft.scss
                     |
                     |
                     |--- .bowererrc (configuration bower)
                     |--- bower.json (dépendances du projet)
                     |--- build.config.js (fichier de configuration du build)
                     |--- gulpfile.js
                     |--- package.js (dépendances de l'environnement de développement)



En règle générale :

les nouveaux composants de type directive, sont créés dans le répertoire composite.
les nouveaux composants de type service, sont créés dans le répertoire service.
Le css des composants doit être dans un fichier sass portant le nom du composant.

##Le CSS, LESS, SASS

le CSS de d'angular-common surcharge celui material bootstrap qui lui-même surcharge celui de bootstrap

l'idée initiale est d'utiliser bootstrap comme base du templating css, surchargeable par des styles itesoft, le parti pris actuel étant le material design , le theme material bootstrap à été utiliser pour surcharger bootstrap.


##Création d'un nouveau composant

La création d'un nouveau composant implique la création d'une nouvelle branche git (portant le nom de votre composant),
 dans laquelle vous allez commiter pendant la phase de développement.

une fois le composant validé et testé, merger la branche avec master.


# Comment participer ???!!!


La documentation et les exemples du showcase sont automatiquement générés à partir de la ngDoc associée aux composants,
il est de ce fait important de correctement documenter vos composants afin qu'ils soient
réutilisables et maintenables. Un composant mal documenté ne sera jamais utilisé.

La ngDoc permet d'exposer des exemples de votre composant via l'annotation @example. Cette dernière, une fois interprétée par le plugin gulp-ngDoc, sera inclus dans le showcase et un lien permettra de la tester sous plunker.
Une fois votre composant testé, documenté et commité, il convient de mettre à jour la [documentation](http://alizarion.github.io/angular-common/) pour se faire :

                gulp build  <-- génération de la dist
                gulp docs   <-- génération du showcase
                gulp deploy <-- publication du showcase sur github https://github.com/alizarion/angular-common/tree/gh-pages

## Utilisation des branches sur github.

                   __feature branch ______O <--  feature branch
                  /                   \
                 /                     \
        ________O______develop__________O___________________________ <-- dev branch
       /                                       \
      /                                         \
     /___________________master__________________0__________________ <-- release branch
                                          release

* branch master : réservé uniquement aux releases.
* branch develop : branche de développement.
* branch feature : à chaque nouvelle feature, créer une nouvelle branche à partir de "develop" portant le nom de la feature.




## Pour un hotfix
* récupérer la branche develop du projet :
            git clone https://github.com/alizarion/angular-common.git

* créer une branch pour votre hotfix à partir de develop.

            git checkout -b master-detail-hotfix develop

* corriger, tester et commiter le correctif.

            git commit -a -m "Correctif du bug blablab ..."

* remerger avec la branch develop :

                git checkout develop
                git merge --no-ff master-detail-hotfix
                git tag -a master-detail-hotfix

* suppression de la branch
                git branch -d master-detail-hotfix

* push de develop
               git push origin develop

## Pour une nouvelle feature.
* récupérer la branche develop du projet :
            git clone https://github.com/alizarion/angular-common.git

* créer une nouvelle branch pour votre feature à partir de develop :

               git checkout -b myfeature develop


                              ___ myfeature _ <--  feature branch
                             /
                            /
                   ________O______develop_______
                  /
                 /
                /___________________master_______



* rédiger la ngDoc contenant l'exemple d'utilisation de la documentation via l'annotation @example, le watch met à jour autatiquement le showcase.
            gulp watch

* commitez
            git commit -a -m "Ma super feature"

                              ___ myfeature _o__ <--  commit sur branch feature
                             /
                            /
                   ________O______develop_______
                  /
                 /
                /___________________master_______


* et mergez avec develop

            git checkout develop
            git merge --no-ff myfeature

                              ___ myfeature _o______
                             /                 \
                            /                   \
                   ________O______develop________o__ <--  merge myfeature avec develop
                  /
                 /
                /___________________master__________

* suppression de la branch

            git branch -d myfeature

                              ___ myfeature _o_______o <--  suppression branch myfeature
                             /                 \
                            /                   \
                   ________O______develop________o___
                  /
                 /
                /___________________master___________

* générer la dist

            gulp build

* push de develop

               git push origin develop

* générer le showcase à partir de la documentation

            gulp docs

* il ne reste plus qu'à déployer le showcase généré à partir de votre documentation

            gulp deploy



#Rappel des bonnes pratiques AngularJS

[source](https://github.com/alizarion/angularjs-style-guide/blob/master/README-fr-fr.md)

* Utiliser:
    * `$timeout` au lieu de `setTimeout`
    * `$interval` au lieu de `setInterval`
    * `$window` au lieu de `window`
    * `$document` au lieu de `document`
    * `$http` au lieu de `$.ajax`
Cela rendra vos tests plus faciles et, dans certains cas, évitera les comportements inattendus

# Controllers
* The naming of the controller is done using the controller's
* Les contrôleurs sont nommés en UpperCamelCase [Controller.js].
* The naming of the controller is done using the controller's functionality (for example shopping cart, homepage, admin panel) and the substring `Controller` in the end.
* Controllers are plain javascript so they will be named UpperCamelCase (`HomePageController`, `ShoppingCartController`, `AdminPanelController`, etc.).

# Directives

* Name your directives with lowerCamelCase.
* Name your directive files with lowerCamelCase[Directive.js].
* Use `scope` instead of `$scope` in your link function. In the compile, post/pre link functions you have already defined arguments which will be passed when the function is invoked, you won't be able to change them using DI. This style is also used in AngularJS's source code.
* Use `pm` prefixe for your directives to prevent name collisions with third-party libraries, and end with `Directive.js`  ex :  `pmDropdownDirective.js`
* Do not use `ng`, `ui` or `it` prefixes since they are reserved for AngularJS and AngularJS UI and itesoft-angular-common.
* DOM manipulations must be done only through directives.
* Create an isolated scope when you develop reusable components.
* Use directives as attributes or elements instead of comments or classes, this will make your code more readable.
* Use `scope.$on('$destroy', fn)` for cleaning up. This is especially useful when you're wrapping third-party plugins as directives.

# Filters

* Name your filters with lowerCamelCase.
* Name your filter  files  with lowerCamelCase[Filter.js].
* Make your filters as light as possible. They are called often during the `$digest` loop so creating a slow filter will slow down your app.
* Do a single thing in your filters, keep them coherent. More complex manipulations can be achieved by piping existing filters.

# Services
* Name your service files with lowerCamelCase[Service.js].
* Use camelCase to name your services.
* UpperCamelCase (PascalCase) for naming your services, used as constructor functions i.e.:

                    function MainCtrl($scope, User) {
                      $scope.user = new User('foo', 42);
                    }

                    module.controller('MainCtrl', MainCtrl);

                    function User(name, age) {
                      this.name = name;
                      this.age = age;
                    }

                    module.factory('User', function () {
                      return User;
                    });

  * lowerCamelCase for all other services.

* Encapsulate all the business logic in services. Prefer using it as your `model`.